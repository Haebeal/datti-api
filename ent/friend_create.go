// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datti-api/ent/friend"
)

// FriendCreate is the builder for creating a Friend entity.
type FriendCreate struct {
	config
	mutation *FriendMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (fc *FriendCreate) SetUID(s string) *FriendCreate {
	fc.mutation.SetUID(s)
	return fc
}

// SetFriendUID sets the "friend_uid" field.
func (fc *FriendCreate) SetFriendUID(s string) *FriendCreate {
	fc.mutation.SetFriendUID(s)
	return fc
}

// SetCreatedAt sets the "created_at" field.
func (fc *FriendCreate) SetCreatedAt(t time.Time) *FriendCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FriendCreate) SetNillableCreatedAt(t *time.Time) *FriendCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FriendCreate) SetUpdatedAt(t time.Time) *FriendCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FriendCreate) SetNillableUpdatedAt(t *time.Time) *FriendCreate {
	if t != nil {
		fc.SetUpdatedAt(*t)
	}
	return fc
}

// SetDeletedAt sets the "deleted_at" field.
func (fc *FriendCreate) SetDeletedAt(t time.Time) *FriendCreate {
	fc.mutation.SetDeletedAt(t)
	return fc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fc *FriendCreate) SetNillableDeletedAt(t *time.Time) *FriendCreate {
	if t != nil {
		fc.SetDeletedAt(*t)
	}
	return fc
}

// Mutation returns the FriendMutation object of the builder.
func (fc *FriendCreate) Mutation() *FriendMutation {
	return fc.mutation
}

// Save creates the Friend in the database.
func (fc *FriendCreate) Save(ctx context.Context) (*Friend, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FriendCreate) SaveX(ctx context.Context) *Friend {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FriendCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FriendCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FriendCreate) defaults() {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := friend.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		v := friend.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FriendCreate) check() error {
	if _, ok := fc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`ent: missing required field "Friend.uid"`)}
	}
	if v, ok := fc.mutation.UID(); ok {
		if err := friend.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`ent: validator failed for field "Friend.uid": %w`, err)}
		}
	}
	if _, ok := fc.mutation.FriendUID(); !ok {
		return &ValidationError{Name: "friend_uid", err: errors.New(`ent: missing required field "Friend.friend_uid"`)}
	}
	if v, ok := fc.mutation.FriendUID(); ok {
		if err := friend.FriendUIDValidator(v); err != nil {
			return &ValidationError{Name: "friend_uid", err: fmt.Errorf(`ent: validator failed for field "Friend.friend_uid": %w`, err)}
		}
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Friend.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Friend.updated_at"`)}
	}
	return nil
}

func (fc *FriendCreate) sqlSave(ctx context.Context) (*Friend, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FriendCreate) createSpec() (*Friend, *sqlgraph.CreateSpec) {
	var (
		_node = &Friend{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(friend.Table, sqlgraph.NewFieldSpec(friend.FieldID, field.TypeInt))
	)
	_spec.OnConflict = fc.conflict
	if value, ok := fc.mutation.UID(); ok {
		_spec.SetField(friend.FieldUID, field.TypeString, value)
		_node.UID = value
	}
	if value, ok := fc.mutation.FriendUID(); ok {
		_spec.SetField(friend.FieldFriendUID, field.TypeString, value)
		_node.FriendUID = value
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(friend.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.SetField(friend.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fc.mutation.DeletedAt(); ok {
		_spec.SetField(friend.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Friend.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FriendUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
func (fc *FriendCreate) OnConflict(opts ...sql.ConflictOption) *FriendUpsertOne {
	fc.conflict = opts
	return &FriendUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Friend.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fc *FriendCreate) OnConflictColumns(columns ...string) *FriendUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FriendUpsertOne{
		create: fc,
	}
}

type (
	// FriendUpsertOne is the builder for "upsert"-ing
	//  one Friend node.
	FriendUpsertOne struct {
		create *FriendCreate
	}

	// FriendUpsert is the "OnConflict" setter.
	FriendUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *FriendUpsert) SetUID(v string) *FriendUpsert {
	u.Set(friend.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *FriendUpsert) UpdateUID() *FriendUpsert {
	u.SetExcluded(friend.FieldUID)
	return u
}

// SetFriendUID sets the "friend_uid" field.
func (u *FriendUpsert) SetFriendUID(v string) *FriendUpsert {
	u.Set(friend.FieldFriendUID, v)
	return u
}

// UpdateFriendUID sets the "friend_uid" field to the value that was provided on create.
func (u *FriendUpsert) UpdateFriendUID() *FriendUpsert {
	u.SetExcluded(friend.FieldFriendUID)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FriendUpsert) SetUpdatedAt(v time.Time) *FriendUpsert {
	u.Set(friend.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FriendUpsert) UpdateUpdatedAt() *FriendUpsert {
	u.SetExcluded(friend.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FriendUpsert) SetDeletedAt(v time.Time) *FriendUpsert {
	u.Set(friend.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FriendUpsert) UpdateDeletedAt() *FriendUpsert {
	u.SetExcluded(friend.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FriendUpsert) ClearDeletedAt() *FriendUpsert {
	u.SetNull(friend.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Friend.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FriendUpsertOne) UpdateNewValues() *FriendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(friend.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Friend.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FriendUpsertOne) Ignore() *FriendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FriendUpsertOne) DoNothing() *FriendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FriendCreate.OnConflict
// documentation for more info.
func (u *FriendUpsertOne) Update(set func(*FriendUpsert)) *FriendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FriendUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *FriendUpsertOne) SetUID(v string) *FriendUpsertOne {
	return u.Update(func(s *FriendUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *FriendUpsertOne) UpdateUID() *FriendUpsertOne {
	return u.Update(func(s *FriendUpsert) {
		s.UpdateUID()
	})
}

// SetFriendUID sets the "friend_uid" field.
func (u *FriendUpsertOne) SetFriendUID(v string) *FriendUpsertOne {
	return u.Update(func(s *FriendUpsert) {
		s.SetFriendUID(v)
	})
}

// UpdateFriendUID sets the "friend_uid" field to the value that was provided on create.
func (u *FriendUpsertOne) UpdateFriendUID() *FriendUpsertOne {
	return u.Update(func(s *FriendUpsert) {
		s.UpdateFriendUID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FriendUpsertOne) SetUpdatedAt(v time.Time) *FriendUpsertOne {
	return u.Update(func(s *FriendUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FriendUpsertOne) UpdateUpdatedAt() *FriendUpsertOne {
	return u.Update(func(s *FriendUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FriendUpsertOne) SetDeletedAt(v time.Time) *FriendUpsertOne {
	return u.Update(func(s *FriendUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FriendUpsertOne) UpdateDeletedAt() *FriendUpsertOne {
	return u.Update(func(s *FriendUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FriendUpsertOne) ClearDeletedAt() *FriendUpsertOne {
	return u.Update(func(s *FriendUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *FriendUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FriendCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FriendUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FriendUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FriendUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FriendCreateBulk is the builder for creating many Friend entities in bulk.
type FriendCreateBulk struct {
	config
	err      error
	builders []*FriendCreate
	conflict []sql.ConflictOption
}

// Save creates the Friend entities in the database.
func (fcb *FriendCreateBulk) Save(ctx context.Context) ([]*Friend, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Friend, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FriendMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FriendCreateBulk) SaveX(ctx context.Context) []*Friend {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FriendCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FriendCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Friend.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FriendUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
func (fcb *FriendCreateBulk) OnConflict(opts ...sql.ConflictOption) *FriendUpsertBulk {
	fcb.conflict = opts
	return &FriendUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Friend.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcb *FriendCreateBulk) OnConflictColumns(columns ...string) *FriendUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FriendUpsertBulk{
		create: fcb,
	}
}

// FriendUpsertBulk is the builder for "upsert"-ing
// a bulk of Friend nodes.
type FriendUpsertBulk struct {
	create *FriendCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Friend.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FriendUpsertBulk) UpdateNewValues() *FriendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(friend.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Friend.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FriendUpsertBulk) Ignore() *FriendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FriendUpsertBulk) DoNothing() *FriendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FriendCreateBulk.OnConflict
// documentation for more info.
func (u *FriendUpsertBulk) Update(set func(*FriendUpsert)) *FriendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FriendUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *FriendUpsertBulk) SetUID(v string) *FriendUpsertBulk {
	return u.Update(func(s *FriendUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *FriendUpsertBulk) UpdateUID() *FriendUpsertBulk {
	return u.Update(func(s *FriendUpsert) {
		s.UpdateUID()
	})
}

// SetFriendUID sets the "friend_uid" field.
func (u *FriendUpsertBulk) SetFriendUID(v string) *FriendUpsertBulk {
	return u.Update(func(s *FriendUpsert) {
		s.SetFriendUID(v)
	})
}

// UpdateFriendUID sets the "friend_uid" field to the value that was provided on create.
func (u *FriendUpsertBulk) UpdateFriendUID() *FriendUpsertBulk {
	return u.Update(func(s *FriendUpsert) {
		s.UpdateFriendUID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FriendUpsertBulk) SetUpdatedAt(v time.Time) *FriendUpsertBulk {
	return u.Update(func(s *FriendUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FriendUpsertBulk) UpdateUpdatedAt() *FriendUpsertBulk {
	return u.Update(func(s *FriendUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FriendUpsertBulk) SetDeletedAt(v time.Time) *FriendUpsertBulk {
	return u.Update(func(s *FriendUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FriendUpsertBulk) UpdateDeletedAt() *FriendUpsertBulk {
	return u.Update(func(s *FriendUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FriendUpsertBulk) ClearDeletedAt() *FriendUpsertBulk {
	return u.Update(func(s *FriendUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *FriendUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FriendCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FriendCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FriendUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
