// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/datti-api/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/datti-api/ent/bankaccount"
	"github.com/datti-api/ent/friend"
	"github.com/datti-api/ent/group"
	"github.com/datti-api/ent/groupuser"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// BankAccount is the client for interacting with the BankAccount builders.
	BankAccount *BankAccountClient
	// Friend is the client for interacting with the Friend builders.
	Friend *FriendClient
	// Group is the client for interacting with the Group builders.
	Group *GroupClient
	// GroupUser is the client for interacting with the GroupUser builders.
	GroupUser *GroupUserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.BankAccount = NewBankAccountClient(c.config)
	c.Friend = NewFriendClient(c.config)
	c.Group = NewGroupClient(c.config)
	c.GroupUser = NewGroupUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		BankAccount: NewBankAccountClient(cfg),
		Friend:      NewFriendClient(cfg),
		Group:       NewGroupClient(cfg),
		GroupUser:   NewGroupUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		BankAccount: NewBankAccountClient(cfg),
		Friend:      NewFriendClient(cfg),
		Group:       NewGroupClient(cfg),
		GroupUser:   NewGroupUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		BankAccount.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.BankAccount.Use(hooks...)
	c.Friend.Use(hooks...)
	c.Group.Use(hooks...)
	c.GroupUser.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.BankAccount.Intercept(interceptors...)
	c.Friend.Intercept(interceptors...)
	c.Group.Intercept(interceptors...)
	c.GroupUser.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BankAccountMutation:
		return c.BankAccount.mutate(ctx, m)
	case *FriendMutation:
		return c.Friend.mutate(ctx, m)
	case *GroupMutation:
		return c.Group.mutate(ctx, m)
	case *GroupUserMutation:
		return c.GroupUser.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BankAccountClient is a client for the BankAccount schema.
type BankAccountClient struct {
	config
}

// NewBankAccountClient returns a client for the BankAccount from the given config.
func NewBankAccountClient(c config) *BankAccountClient {
	return &BankAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bankaccount.Hooks(f(g(h())))`.
func (c *BankAccountClient) Use(hooks ...Hook) {
	c.hooks.BankAccount = append(c.hooks.BankAccount, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bankaccount.Intercept(f(g(h())))`.
func (c *BankAccountClient) Intercept(interceptors ...Interceptor) {
	c.inters.BankAccount = append(c.inters.BankAccount, interceptors...)
}

// Create returns a builder for creating a BankAccount entity.
func (c *BankAccountClient) Create() *BankAccountCreate {
	mutation := newBankAccountMutation(c.config, OpCreate)
	return &BankAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BankAccount entities.
func (c *BankAccountClient) CreateBulk(builders ...*BankAccountCreate) *BankAccountCreateBulk {
	return &BankAccountCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BankAccountClient) MapCreateBulk(slice any, setFunc func(*BankAccountCreate, int)) *BankAccountCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BankAccountCreateBulk{err: fmt.Errorf("calling to BankAccountClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BankAccountCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BankAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BankAccount.
func (c *BankAccountClient) Update() *BankAccountUpdate {
	mutation := newBankAccountMutation(c.config, OpUpdate)
	return &BankAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BankAccountClient) UpdateOne(ba *BankAccount) *BankAccountUpdateOne {
	mutation := newBankAccountMutation(c.config, OpUpdateOne, withBankAccount(ba))
	return &BankAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BankAccountClient) UpdateOneID(id string) *BankAccountUpdateOne {
	mutation := newBankAccountMutation(c.config, OpUpdateOne, withBankAccountID(id))
	return &BankAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BankAccount.
func (c *BankAccountClient) Delete() *BankAccountDelete {
	mutation := newBankAccountMutation(c.config, OpDelete)
	return &BankAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BankAccountClient) DeleteOne(ba *BankAccount) *BankAccountDeleteOne {
	return c.DeleteOneID(ba.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BankAccountClient) DeleteOneID(id string) *BankAccountDeleteOne {
	builder := c.Delete().Where(bankaccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BankAccountDeleteOne{builder}
}

// Query returns a query builder for BankAccount.
func (c *BankAccountClient) Query() *BankAccountQuery {
	return &BankAccountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBankAccount},
		inters: c.Interceptors(),
	}
}

// Get returns a BankAccount entity by its id.
func (c *BankAccountClient) Get(ctx context.Context, id string) (*BankAccount, error) {
	return c.Query().Where(bankaccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BankAccountClient) GetX(ctx context.Context, id string) *BankAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BankAccountClient) Hooks() []Hook {
	return c.hooks.BankAccount
}

// Interceptors returns the client interceptors.
func (c *BankAccountClient) Interceptors() []Interceptor {
	return c.inters.BankAccount
}

func (c *BankAccountClient) mutate(ctx context.Context, m *BankAccountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BankAccountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BankAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BankAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BankAccountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BankAccount mutation op: %q", m.Op())
	}
}

// FriendClient is a client for the Friend schema.
type FriendClient struct {
	config
}

// NewFriendClient returns a client for the Friend from the given config.
func NewFriendClient(c config) *FriendClient {
	return &FriendClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `friend.Hooks(f(g(h())))`.
func (c *FriendClient) Use(hooks ...Hook) {
	c.hooks.Friend = append(c.hooks.Friend, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `friend.Intercept(f(g(h())))`.
func (c *FriendClient) Intercept(interceptors ...Interceptor) {
	c.inters.Friend = append(c.inters.Friend, interceptors...)
}

// Create returns a builder for creating a Friend entity.
func (c *FriendClient) Create() *FriendCreate {
	mutation := newFriendMutation(c.config, OpCreate)
	return &FriendCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Friend entities.
func (c *FriendClient) CreateBulk(builders ...*FriendCreate) *FriendCreateBulk {
	return &FriendCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FriendClient) MapCreateBulk(slice any, setFunc func(*FriendCreate, int)) *FriendCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FriendCreateBulk{err: fmt.Errorf("calling to FriendClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FriendCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FriendCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Friend.
func (c *FriendClient) Update() *FriendUpdate {
	mutation := newFriendMutation(c.config, OpUpdate)
	return &FriendUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FriendClient) UpdateOne(f *Friend) *FriendUpdateOne {
	mutation := newFriendMutation(c.config, OpUpdateOne, withFriend(f))
	return &FriendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FriendClient) UpdateOneID(id int) *FriendUpdateOne {
	mutation := newFriendMutation(c.config, OpUpdateOne, withFriendID(id))
	return &FriendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Friend.
func (c *FriendClient) Delete() *FriendDelete {
	mutation := newFriendMutation(c.config, OpDelete)
	return &FriendDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FriendClient) DeleteOne(f *Friend) *FriendDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FriendClient) DeleteOneID(id int) *FriendDeleteOne {
	builder := c.Delete().Where(friend.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FriendDeleteOne{builder}
}

// Query returns a query builder for Friend.
func (c *FriendClient) Query() *FriendQuery {
	return &FriendQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFriend},
		inters: c.Interceptors(),
	}
}

// Get returns a Friend entity by its id.
func (c *FriendClient) Get(ctx context.Context, id int) (*Friend, error) {
	return c.Query().Where(friend.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FriendClient) GetX(ctx context.Context, id int) *Friend {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FriendClient) Hooks() []Hook {
	return c.hooks.Friend
}

// Interceptors returns the client interceptors.
func (c *FriendClient) Interceptors() []Interceptor {
	return c.inters.Friend
}

func (c *FriendClient) mutate(ctx context.Context, m *FriendMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FriendCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FriendUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FriendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FriendDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Friend mutation op: %q", m.Op())
	}
}

// GroupClient is a client for the Group schema.
type GroupClient struct {
	config
}

// NewGroupClient returns a client for the Group from the given config.
func NewGroupClient(c config) *GroupClient {
	return &GroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `group.Hooks(f(g(h())))`.
func (c *GroupClient) Use(hooks ...Hook) {
	c.hooks.Group = append(c.hooks.Group, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `group.Intercept(f(g(h())))`.
func (c *GroupClient) Intercept(interceptors ...Interceptor) {
	c.inters.Group = append(c.inters.Group, interceptors...)
}

// Create returns a builder for creating a Group entity.
func (c *GroupClient) Create() *GroupCreate {
	mutation := newGroupMutation(c.config, OpCreate)
	return &GroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Group entities.
func (c *GroupClient) CreateBulk(builders ...*GroupCreate) *GroupCreateBulk {
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GroupClient) MapCreateBulk(slice any, setFunc func(*GroupCreate, int)) *GroupCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GroupCreateBulk{err: fmt.Errorf("calling to GroupClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GroupCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Group.
func (c *GroupClient) Update() *GroupUpdate {
	mutation := newGroupMutation(c.config, OpUpdate)
	return &GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupClient) UpdateOne(gr *Group) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroup(gr))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupClient) UpdateOneID(id string) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroupID(id))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Group.
func (c *GroupClient) Delete() *GroupDelete {
	mutation := newGroupMutation(c.config, OpDelete)
	return &GroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupClient) DeleteOne(gr *Group) *GroupDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupClient) DeleteOneID(id string) *GroupDeleteOne {
	builder := c.Delete().Where(group.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupDeleteOne{builder}
}

// Query returns a query builder for Group.
func (c *GroupClient) Query() *GroupQuery {
	return &GroupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroup},
		inters: c.Interceptors(),
	}
}

// Get returns a Group entity by its id.
func (c *GroupClient) Get(ctx context.Context, id string) (*Group, error) {
	return c.Query().Where(group.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupClient) GetX(ctx context.Context, id string) *Group {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GroupClient) Hooks() []Hook {
	return c.hooks.Group
}

// Interceptors returns the client interceptors.
func (c *GroupClient) Interceptors() []Interceptor {
	return c.inters.Group
}

func (c *GroupClient) mutate(ctx context.Context, m *GroupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Group mutation op: %q", m.Op())
	}
}

// GroupUserClient is a client for the GroupUser schema.
type GroupUserClient struct {
	config
}

// NewGroupUserClient returns a client for the GroupUser from the given config.
func NewGroupUserClient(c config) *GroupUserClient {
	return &GroupUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groupuser.Hooks(f(g(h())))`.
func (c *GroupUserClient) Use(hooks ...Hook) {
	c.hooks.GroupUser = append(c.hooks.GroupUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `groupuser.Intercept(f(g(h())))`.
func (c *GroupUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.GroupUser = append(c.inters.GroupUser, interceptors...)
}

// Create returns a builder for creating a GroupUser entity.
func (c *GroupUserClient) Create() *GroupUserCreate {
	mutation := newGroupUserMutation(c.config, OpCreate)
	return &GroupUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GroupUser entities.
func (c *GroupUserClient) CreateBulk(builders ...*GroupUserCreate) *GroupUserCreateBulk {
	return &GroupUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GroupUserClient) MapCreateBulk(slice any, setFunc func(*GroupUserCreate, int)) *GroupUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GroupUserCreateBulk{err: fmt.Errorf("calling to GroupUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GroupUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GroupUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GroupUser.
func (c *GroupUserClient) Update() *GroupUserUpdate {
	mutation := newGroupUserMutation(c.config, OpUpdate)
	return &GroupUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupUserClient) UpdateOne(gu *GroupUser) *GroupUserUpdateOne {
	mutation := newGroupUserMutation(c.config, OpUpdateOne, withGroupUser(gu))
	return &GroupUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupUserClient) UpdateOneID(id int) *GroupUserUpdateOne {
	mutation := newGroupUserMutation(c.config, OpUpdateOne, withGroupUserID(id))
	return &GroupUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroupUser.
func (c *GroupUserClient) Delete() *GroupUserDelete {
	mutation := newGroupUserMutation(c.config, OpDelete)
	return &GroupUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupUserClient) DeleteOne(gu *GroupUser) *GroupUserDeleteOne {
	return c.DeleteOneID(gu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupUserClient) DeleteOneID(id int) *GroupUserDeleteOne {
	builder := c.Delete().Where(groupuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupUserDeleteOne{builder}
}

// Query returns a query builder for GroupUser.
func (c *GroupUserClient) Query() *GroupUserQuery {
	return &GroupUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroupUser},
		inters: c.Interceptors(),
	}
}

// Get returns a GroupUser entity by its id.
func (c *GroupUserClient) Get(ctx context.Context, id int) (*GroupUser, error) {
	return c.Query().Where(groupuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupUserClient) GetX(ctx context.Context, id int) *GroupUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GroupUserClient) Hooks() []Hook {
	return c.hooks.GroupUser
}

// Interceptors returns the client interceptors.
func (c *GroupUserClient) Interceptors() []Interceptor {
	return c.inters.GroupUser
}

func (c *GroupUserClient) mutate(ctx context.Context, m *GroupUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GroupUser mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		BankAccount, Friend, Group, GroupUser []ent.Hook
	}
	inters struct {
		BankAccount, Friend, Group, GroupUser []ent.Interceptor
	}
)
