// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datti-api/ent/groupuser"
	"github.com/datti-api/ent/predicate"
)

// GroupUserUpdate is the builder for updating GroupUser entities.
type GroupUserUpdate struct {
	config
	hooks    []Hook
	mutation *GroupUserMutation
}

// Where appends a list predicates to the GroupUserUpdate builder.
func (guu *GroupUserUpdate) Where(ps ...predicate.GroupUser) *GroupUserUpdate {
	guu.mutation.Where(ps...)
	return guu
}

// SetUID sets the "uid" field.
func (guu *GroupUserUpdate) SetUID(s string) *GroupUserUpdate {
	guu.mutation.SetUID(s)
	return guu
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (guu *GroupUserUpdate) SetNillableUID(s *string) *GroupUserUpdate {
	if s != nil {
		guu.SetUID(*s)
	}
	return guu
}

// SetGroupID sets the "group_id" field.
func (guu *GroupUserUpdate) SetGroupID(s string) *GroupUserUpdate {
	guu.mutation.SetGroupID(s)
	return guu
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (guu *GroupUserUpdate) SetNillableGroupID(s *string) *GroupUserUpdate {
	if s != nil {
		guu.SetGroupID(*s)
	}
	return guu
}

// SetOwner sets the "owner" field.
func (guu *GroupUserUpdate) SetOwner(b bool) *GroupUserUpdate {
	guu.mutation.SetOwner(b)
	return guu
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (guu *GroupUserUpdate) SetNillableOwner(b *bool) *GroupUserUpdate {
	if b != nil {
		guu.SetOwner(*b)
	}
	return guu
}

// SetUpdateAt sets the "update_at" field.
func (guu *GroupUserUpdate) SetUpdateAt(t time.Time) *GroupUserUpdate {
	guu.mutation.SetUpdateAt(t)
	return guu
}

// SetDeleteAt sets the "delete_at" field.
func (guu *GroupUserUpdate) SetDeleteAt(t time.Time) *GroupUserUpdate {
	guu.mutation.SetDeleteAt(t)
	return guu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (guu *GroupUserUpdate) SetNillableDeleteAt(t *time.Time) *GroupUserUpdate {
	if t != nil {
		guu.SetDeleteAt(*t)
	}
	return guu
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (guu *GroupUserUpdate) ClearDeleteAt() *GroupUserUpdate {
	guu.mutation.ClearDeleteAt()
	return guu
}

// Mutation returns the GroupUserMutation object of the builder.
func (guu *GroupUserUpdate) Mutation() *GroupUserMutation {
	return guu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (guu *GroupUserUpdate) Save(ctx context.Context) (int, error) {
	guu.defaults()
	return withHooks(ctx, guu.sqlSave, guu.mutation, guu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guu *GroupUserUpdate) SaveX(ctx context.Context) int {
	affected, err := guu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (guu *GroupUserUpdate) Exec(ctx context.Context) error {
	_, err := guu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guu *GroupUserUpdate) ExecX(ctx context.Context) {
	if err := guu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guu *GroupUserUpdate) defaults() {
	if _, ok := guu.mutation.UpdateAt(); !ok {
		v := groupuser.UpdateDefaultUpdateAt()
		guu.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guu *GroupUserUpdate) check() error {
	if v, ok := guu.mutation.UID(); ok {
		if err := groupuser.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`ent: validator failed for field "GroupUser.uid": %w`, err)}
		}
	}
	if v, ok := guu.mutation.GroupID(); ok {
		if err := groupuser.GroupIDValidator(v); err != nil {
			return &ValidationError{Name: "group_id", err: fmt.Errorf(`ent: validator failed for field "GroupUser.group_id": %w`, err)}
		}
	}
	return nil
}

func (guu *GroupUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := guu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(groupuser.Table, groupuser.Columns, sqlgraph.NewFieldSpec(groupuser.FieldID, field.TypeInt))
	if ps := guu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guu.mutation.UID(); ok {
		_spec.SetField(groupuser.FieldUID, field.TypeString, value)
	}
	if value, ok := guu.mutation.GroupID(); ok {
		_spec.SetField(groupuser.FieldGroupID, field.TypeString, value)
	}
	if value, ok := guu.mutation.Owner(); ok {
		_spec.SetField(groupuser.FieldOwner, field.TypeBool, value)
	}
	if value, ok := guu.mutation.UpdateAt(); ok {
		_spec.SetField(groupuser.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := guu.mutation.DeleteAt(); ok {
		_spec.SetField(groupuser.FieldDeleteAt, field.TypeTime, value)
	}
	if guu.mutation.DeleteAtCleared() {
		_spec.ClearField(groupuser.FieldDeleteAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, guu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	guu.mutation.done = true
	return n, nil
}

// GroupUserUpdateOne is the builder for updating a single GroupUser entity.
type GroupUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupUserMutation
}

// SetUID sets the "uid" field.
func (guuo *GroupUserUpdateOne) SetUID(s string) *GroupUserUpdateOne {
	guuo.mutation.SetUID(s)
	return guuo
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (guuo *GroupUserUpdateOne) SetNillableUID(s *string) *GroupUserUpdateOne {
	if s != nil {
		guuo.SetUID(*s)
	}
	return guuo
}

// SetGroupID sets the "group_id" field.
func (guuo *GroupUserUpdateOne) SetGroupID(s string) *GroupUserUpdateOne {
	guuo.mutation.SetGroupID(s)
	return guuo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (guuo *GroupUserUpdateOne) SetNillableGroupID(s *string) *GroupUserUpdateOne {
	if s != nil {
		guuo.SetGroupID(*s)
	}
	return guuo
}

// SetOwner sets the "owner" field.
func (guuo *GroupUserUpdateOne) SetOwner(b bool) *GroupUserUpdateOne {
	guuo.mutation.SetOwner(b)
	return guuo
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (guuo *GroupUserUpdateOne) SetNillableOwner(b *bool) *GroupUserUpdateOne {
	if b != nil {
		guuo.SetOwner(*b)
	}
	return guuo
}

// SetUpdateAt sets the "update_at" field.
func (guuo *GroupUserUpdateOne) SetUpdateAt(t time.Time) *GroupUserUpdateOne {
	guuo.mutation.SetUpdateAt(t)
	return guuo
}

// SetDeleteAt sets the "delete_at" field.
func (guuo *GroupUserUpdateOne) SetDeleteAt(t time.Time) *GroupUserUpdateOne {
	guuo.mutation.SetDeleteAt(t)
	return guuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (guuo *GroupUserUpdateOne) SetNillableDeleteAt(t *time.Time) *GroupUserUpdateOne {
	if t != nil {
		guuo.SetDeleteAt(*t)
	}
	return guuo
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (guuo *GroupUserUpdateOne) ClearDeleteAt() *GroupUserUpdateOne {
	guuo.mutation.ClearDeleteAt()
	return guuo
}

// Mutation returns the GroupUserMutation object of the builder.
func (guuo *GroupUserUpdateOne) Mutation() *GroupUserMutation {
	return guuo.mutation
}

// Where appends a list predicates to the GroupUserUpdate builder.
func (guuo *GroupUserUpdateOne) Where(ps ...predicate.GroupUser) *GroupUserUpdateOne {
	guuo.mutation.Where(ps...)
	return guuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guuo *GroupUserUpdateOne) Select(field string, fields ...string) *GroupUserUpdateOne {
	guuo.fields = append([]string{field}, fields...)
	return guuo
}

// Save executes the query and returns the updated GroupUser entity.
func (guuo *GroupUserUpdateOne) Save(ctx context.Context) (*GroupUser, error) {
	guuo.defaults()
	return withHooks(ctx, guuo.sqlSave, guuo.mutation, guuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guuo *GroupUserUpdateOne) SaveX(ctx context.Context) *GroupUser {
	node, err := guuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guuo *GroupUserUpdateOne) Exec(ctx context.Context) error {
	_, err := guuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guuo *GroupUserUpdateOne) ExecX(ctx context.Context) {
	if err := guuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guuo *GroupUserUpdateOne) defaults() {
	if _, ok := guuo.mutation.UpdateAt(); !ok {
		v := groupuser.UpdateDefaultUpdateAt()
		guuo.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guuo *GroupUserUpdateOne) check() error {
	if v, ok := guuo.mutation.UID(); ok {
		if err := groupuser.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`ent: validator failed for field "GroupUser.uid": %w`, err)}
		}
	}
	if v, ok := guuo.mutation.GroupID(); ok {
		if err := groupuser.GroupIDValidator(v); err != nil {
			return &ValidationError{Name: "group_id", err: fmt.Errorf(`ent: validator failed for field "GroupUser.group_id": %w`, err)}
		}
	}
	return nil
}

func (guuo *GroupUserUpdateOne) sqlSave(ctx context.Context) (_node *GroupUser, err error) {
	if err := guuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(groupuser.Table, groupuser.Columns, sqlgraph.NewFieldSpec(groupuser.FieldID, field.TypeInt))
	id, ok := guuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GroupUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, groupuser.FieldID)
		for _, f := range fields {
			if !groupuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != groupuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guuo.mutation.UID(); ok {
		_spec.SetField(groupuser.FieldUID, field.TypeString, value)
	}
	if value, ok := guuo.mutation.GroupID(); ok {
		_spec.SetField(groupuser.FieldGroupID, field.TypeString, value)
	}
	if value, ok := guuo.mutation.Owner(); ok {
		_spec.SetField(groupuser.FieldOwner, field.TypeBool, value)
	}
	if value, ok := guuo.mutation.UpdateAt(); ok {
		_spec.SetField(groupuser.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := guuo.mutation.DeleteAt(); ok {
		_spec.SetField(groupuser.FieldDeleteAt, field.TypeTime, value)
	}
	if guuo.mutation.DeleteAtCleared() {
		_spec.ClearField(groupuser.FieldDeleteAt, field.TypeTime)
	}
	_node = &GroupUser{config: guuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guuo.mutation.done = true
	return _node, nil
}
