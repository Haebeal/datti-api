// Code generated by ent, DO NOT EDIT.

package friend

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/datti-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Friend {
	return predicate.Friend(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Friend {
	return predicate.Friend(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Friend {
	return predicate.Friend(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Friend {
	return predicate.Friend(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Friend {
	return predicate.Friend(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Friend {
	return predicate.Friend(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Friend {
	return predicate.Friend(sql.FieldLTE(FieldID, id))
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v string) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldUID, v))
}

// FriendUID applies equality check predicate on the "friend_uid" field. It's identical to FriendUIDEQ.
func FriendUID(v string) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldFriendUID, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldCreateAt, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldUpdateAt, v))
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldDeleteAt, v))
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v string) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldUID, v))
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v string) predicate.Friend {
	return predicate.Friend(sql.FieldNEQ(FieldUID, v))
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...string) predicate.Friend {
	return predicate.Friend(sql.FieldIn(FieldUID, vs...))
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...string) predicate.Friend {
	return predicate.Friend(sql.FieldNotIn(FieldUID, vs...))
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v string) predicate.Friend {
	return predicate.Friend(sql.FieldGT(FieldUID, v))
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v string) predicate.Friend {
	return predicate.Friend(sql.FieldGTE(FieldUID, v))
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v string) predicate.Friend {
	return predicate.Friend(sql.FieldLT(FieldUID, v))
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v string) predicate.Friend {
	return predicate.Friend(sql.FieldLTE(FieldUID, v))
}

// UIDContains applies the Contains predicate on the "uid" field.
func UIDContains(v string) predicate.Friend {
	return predicate.Friend(sql.FieldContains(FieldUID, v))
}

// UIDHasPrefix applies the HasPrefix predicate on the "uid" field.
func UIDHasPrefix(v string) predicate.Friend {
	return predicate.Friend(sql.FieldHasPrefix(FieldUID, v))
}

// UIDHasSuffix applies the HasSuffix predicate on the "uid" field.
func UIDHasSuffix(v string) predicate.Friend {
	return predicate.Friend(sql.FieldHasSuffix(FieldUID, v))
}

// UIDEqualFold applies the EqualFold predicate on the "uid" field.
func UIDEqualFold(v string) predicate.Friend {
	return predicate.Friend(sql.FieldEqualFold(FieldUID, v))
}

// UIDContainsFold applies the ContainsFold predicate on the "uid" field.
func UIDContainsFold(v string) predicate.Friend {
	return predicate.Friend(sql.FieldContainsFold(FieldUID, v))
}

// FriendUIDEQ applies the EQ predicate on the "friend_uid" field.
func FriendUIDEQ(v string) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldFriendUID, v))
}

// FriendUIDNEQ applies the NEQ predicate on the "friend_uid" field.
func FriendUIDNEQ(v string) predicate.Friend {
	return predicate.Friend(sql.FieldNEQ(FieldFriendUID, v))
}

// FriendUIDIn applies the In predicate on the "friend_uid" field.
func FriendUIDIn(vs ...string) predicate.Friend {
	return predicate.Friend(sql.FieldIn(FieldFriendUID, vs...))
}

// FriendUIDNotIn applies the NotIn predicate on the "friend_uid" field.
func FriendUIDNotIn(vs ...string) predicate.Friend {
	return predicate.Friend(sql.FieldNotIn(FieldFriendUID, vs...))
}

// FriendUIDGT applies the GT predicate on the "friend_uid" field.
func FriendUIDGT(v string) predicate.Friend {
	return predicate.Friend(sql.FieldGT(FieldFriendUID, v))
}

// FriendUIDGTE applies the GTE predicate on the "friend_uid" field.
func FriendUIDGTE(v string) predicate.Friend {
	return predicate.Friend(sql.FieldGTE(FieldFriendUID, v))
}

// FriendUIDLT applies the LT predicate on the "friend_uid" field.
func FriendUIDLT(v string) predicate.Friend {
	return predicate.Friend(sql.FieldLT(FieldFriendUID, v))
}

// FriendUIDLTE applies the LTE predicate on the "friend_uid" field.
func FriendUIDLTE(v string) predicate.Friend {
	return predicate.Friend(sql.FieldLTE(FieldFriendUID, v))
}

// FriendUIDContains applies the Contains predicate on the "friend_uid" field.
func FriendUIDContains(v string) predicate.Friend {
	return predicate.Friend(sql.FieldContains(FieldFriendUID, v))
}

// FriendUIDHasPrefix applies the HasPrefix predicate on the "friend_uid" field.
func FriendUIDHasPrefix(v string) predicate.Friend {
	return predicate.Friend(sql.FieldHasPrefix(FieldFriendUID, v))
}

// FriendUIDHasSuffix applies the HasSuffix predicate on the "friend_uid" field.
func FriendUIDHasSuffix(v string) predicate.Friend {
	return predicate.Friend(sql.FieldHasSuffix(FieldFriendUID, v))
}

// FriendUIDEqualFold applies the EqualFold predicate on the "friend_uid" field.
func FriendUIDEqualFold(v string) predicate.Friend {
	return predicate.Friend(sql.FieldEqualFold(FieldFriendUID, v))
}

// FriendUIDContainsFold applies the ContainsFold predicate on the "friend_uid" field.
func FriendUIDContainsFold(v string) predicate.Friend {
	return predicate.Friend(sql.FieldContainsFold(FieldFriendUID, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldLTE(FieldCreateAt, v))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldLTE(FieldUpdateAt, v))
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldDeleteAt, v))
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldNEQ(FieldDeleteAt, v))
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldIn(FieldDeleteAt, vs...))
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldNotIn(FieldDeleteAt, vs...))
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldGT(FieldDeleteAt, v))
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldGTE(FieldDeleteAt, v))
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldLT(FieldDeleteAt, v))
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldLTE(FieldDeleteAt, v))
}

// DeleteAtIsNil applies the IsNil predicate on the "delete_at" field.
func DeleteAtIsNil() predicate.Friend {
	return predicate.Friend(sql.FieldIsNull(FieldDeleteAt))
}

// DeleteAtNotNil applies the NotNil predicate on the "delete_at" field.
func DeleteAtNotNil() predicate.Friend {
	return predicate.Friend(sql.FieldNotNull(FieldDeleteAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Friend) predicate.Friend {
	return predicate.Friend(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Friend) predicate.Friend {
	return predicate.Friend(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Friend) predicate.Friend {
	return predicate.Friend(sql.NotPredicates(p))
}
