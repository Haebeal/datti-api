// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/datti-api/ent/bankaccount"
	"github.com/datti-api/ent/friend"
	"github.com/datti-api/ent/group"
	"github.com/datti-api/ent/groupuser"
	"github.com/datti-api/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	bankaccountFields := schema.BankAccount{}.Fields()
	_ = bankaccountFields
	// bankaccountDescAccountCode is the schema descriptor for account_code field.
	bankaccountDescAccountCode := bankaccountFields[1].Descriptor()
	// bankaccount.AccountCodeValidator is a validator for the "account_code" field. It is called by the builders before save.
	bankaccount.AccountCodeValidator = func() func(string) error {
		validators := bankaccountDescAccountCode.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(account_code string) error {
			for _, fn := range fns {
				if err := fn(account_code); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// bankaccountDescBankCode is the schema descriptor for bank_code field.
	bankaccountDescBankCode := bankaccountFields[2].Descriptor()
	// bankaccount.BankCodeValidator is a validator for the "bank_code" field. It is called by the builders before save.
	bankaccount.BankCodeValidator = func() func(string) error {
		validators := bankaccountDescBankCode.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(bank_code string) error {
			for _, fn := range fns {
				if err := fn(bank_code); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// bankaccountDescBranchCode is the schema descriptor for branch_code field.
	bankaccountDescBranchCode := bankaccountFields[3].Descriptor()
	// bankaccount.BranchCodeValidator is a validator for the "branch_code" field. It is called by the builders before save.
	bankaccount.BranchCodeValidator = func() func(string) error {
		validators := bankaccountDescBranchCode.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(branch_code string) error {
			for _, fn := range fns {
				if err := fn(branch_code); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// bankaccountDescCreatedAt is the schema descriptor for created_at field.
	bankaccountDescCreatedAt := bankaccountFields[4].Descriptor()
	// bankaccount.DefaultCreatedAt holds the default value on creation for the created_at field.
	bankaccount.DefaultCreatedAt = bankaccountDescCreatedAt.Default.(func() time.Time)
	// bankaccountDescUpdatedAt is the schema descriptor for updated_at field.
	bankaccountDescUpdatedAt := bankaccountFields[5].Descriptor()
	// bankaccount.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	bankaccount.DefaultUpdatedAt = bankaccountDescUpdatedAt.Default.(func() time.Time)
	// bankaccount.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	bankaccount.UpdateDefaultUpdatedAt = bankaccountDescUpdatedAt.UpdateDefault.(func() time.Time)
	// bankaccountDescID is the schema descriptor for id field.
	bankaccountDescID := bankaccountFields[0].Descriptor()
	// bankaccount.IDValidator is a validator for the "id" field. It is called by the builders before save.
	bankaccount.IDValidator = func() func(string) error {
		validators := bankaccountDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	friendFields := schema.Friend{}.Fields()
	_ = friendFields
	// friendDescUID is the schema descriptor for uid field.
	friendDescUID := friendFields[0].Descriptor()
	// friend.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	friend.UIDValidator = func() func(string) error {
		validators := friendDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// friendDescFriendUID is the schema descriptor for friend_uid field.
	friendDescFriendUID := friendFields[1].Descriptor()
	// friend.FriendUIDValidator is a validator for the "friend_uid" field. It is called by the builders before save.
	friend.FriendUIDValidator = func() func(string) error {
		validators := friendDescFriendUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(friend_uid string) error {
			for _, fn := range fns {
				if err := fn(friend_uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// friendDescCreatedAt is the schema descriptor for created_at field.
	friendDescCreatedAt := friendFields[2].Descriptor()
	// friend.DefaultCreatedAt holds the default value on creation for the created_at field.
	friend.DefaultCreatedAt = friendDescCreatedAt.Default.(func() time.Time)
	// friendDescUpdatedAt is the schema descriptor for updated_at field.
	friendDescUpdatedAt := friendFields[3].Descriptor()
	// friend.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	friend.DefaultUpdatedAt = friendDescUpdatedAt.Default.(func() time.Time)
	// friend.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	friend.UpdateDefaultUpdatedAt = friendDescUpdatedAt.UpdateDefault.(func() time.Time)
	groupFields := schema.Group{}.Fields()
	_ = groupFields
	// groupDescName is the schema descriptor for name field.
	groupDescName := groupFields[1].Descriptor()
	// group.NameValidator is a validator for the "name" field. It is called by the builders before save.
	group.NameValidator = groupDescName.Validators[0].(func(string) error)
	// groupDescCreatedAt is the schema descriptor for created_at field.
	groupDescCreatedAt := groupFields[2].Descriptor()
	// group.DefaultCreatedAt holds the default value on creation for the created_at field.
	group.DefaultCreatedAt = groupDescCreatedAt.Default.(func() time.Time)
	// groupDescUpdatedAt is the schema descriptor for updated_at field.
	groupDescUpdatedAt := groupFields[3].Descriptor()
	// group.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	group.DefaultUpdatedAt = groupDescUpdatedAt.Default.(func() time.Time)
	// group.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	group.UpdateDefaultUpdatedAt = groupDescUpdatedAt.UpdateDefault.(func() time.Time)
	// groupDescID is the schema descriptor for id field.
	groupDescID := groupFields[0].Descriptor()
	// group.IDValidator is a validator for the "id" field. It is called by the builders before save.
	group.IDValidator = groupDescID.Validators[0].(func(string) error)
	groupuserFields := schema.GroupUser{}.Fields()
	_ = groupuserFields
	// groupuserDescUID is the schema descriptor for uid field.
	groupuserDescUID := groupuserFields[0].Descriptor()
	// groupuser.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	groupuser.UIDValidator = func() func(string) error {
		validators := groupuserDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// groupuserDescGroupID is the schema descriptor for group_id field.
	groupuserDescGroupID := groupuserFields[1].Descriptor()
	// groupuser.GroupIDValidator is a validator for the "group_id" field. It is called by the builders before save.
	groupuser.GroupIDValidator = groupuserDescGroupID.Validators[0].(func(string) error)
	// groupuserDescCreatedAt is the schema descriptor for created_at field.
	groupuserDescCreatedAt := groupuserFields[3].Descriptor()
	// groupuser.DefaultCreatedAt holds the default value on creation for the created_at field.
	groupuser.DefaultCreatedAt = groupuserDescCreatedAt.Default.(func() time.Time)
	// groupuserDescUpdatedAt is the schema descriptor for updated_at field.
	groupuserDescUpdatedAt := groupuserFields[4].Descriptor()
	// groupuser.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	groupuser.DefaultUpdatedAt = groupuserDescUpdatedAt.Default.(func() time.Time)
	// groupuser.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	groupuser.UpdateDefaultUpdatedAt = groupuserDescUpdatedAt.UpdateDefault.(func() time.Time)
}
