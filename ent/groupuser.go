// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datti-api/ent/groupuser"
)

// GroupUser is the model entity for the GroupUser schema.
type GroupUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// GroupID holds the value of the "group_id" field.
	GroupID string `json:"group_id,omitempty"`
	// Owner holds the value of the "owner" field.
	Owner bool `json:"owner,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt time.Time `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt time.Time `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt     *time.Time `json:"delete_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GroupUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case groupuser.FieldOwner:
			values[i] = new(sql.NullBool)
		case groupuser.FieldID:
			values[i] = new(sql.NullInt64)
		case groupuser.FieldUID, groupuser.FieldGroupID:
			values[i] = new(sql.NullString)
		case groupuser.FieldCreateAt, groupuser.FieldUpdateAt, groupuser.FieldDeleteAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GroupUser fields.
func (gu *GroupUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case groupuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gu.ID = int(value.Int64)
		case groupuser.FieldUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				gu.UID = value.String
			}
		case groupuser.FieldGroupID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				gu.GroupID = value.String
			}
		case groupuser.FieldOwner:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				gu.Owner = value.Bool
			}
		case groupuser.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				gu.CreateAt = value.Time
			}
		case groupuser.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				gu.UpdateAt = value.Time
			}
		case groupuser.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				gu.DeleteAt = new(time.Time)
				*gu.DeleteAt = value.Time
			}
		default:
			gu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GroupUser.
// This includes values selected through modifiers, order, etc.
func (gu *GroupUser) Value(name string) (ent.Value, error) {
	return gu.selectValues.Get(name)
}

// Update returns a builder for updating this GroupUser.
// Note that you need to call GroupUser.Unwrap() before calling this method if this GroupUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (gu *GroupUser) Update() *GroupUserUpdateOne {
	return NewGroupUserClient(gu.config).UpdateOne(gu)
}

// Unwrap unwraps the GroupUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gu *GroupUser) Unwrap() *GroupUser {
	_tx, ok := gu.config.driver.(*txDriver)
	if !ok {
		panic("ent: GroupUser is not a transactional entity")
	}
	gu.config.driver = _tx.drv
	return gu
}

// String implements the fmt.Stringer.
func (gu *GroupUser) String() string {
	var builder strings.Builder
	builder.WriteString("GroupUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gu.ID))
	builder.WriteString("uid=")
	builder.WriteString(gu.UID)
	builder.WriteString(", ")
	builder.WriteString("group_id=")
	builder.WriteString(gu.GroupID)
	builder.WriteString(", ")
	builder.WriteString("owner=")
	builder.WriteString(fmt.Sprintf("%v", gu.Owner))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(gu.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(gu.UpdateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := gu.DeleteAt; v != nil {
		builder.WriteString("delete_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// GroupUsers is a parsable slice of GroupUser.
type GroupUsers []*GroupUser
