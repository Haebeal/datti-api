// Code generated by ent, DO NOT EDIT.

package bankaccount

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/datti-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldContainsFold(FieldID, id))
}

// AccountCode applies equality check predicate on the "account_code" field. It's identical to AccountCodeEQ.
func AccountCode(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldAccountCode, v))
}

// BankCode applies equality check predicate on the "bank_code" field. It's identical to BankCodeEQ.
func BankCode(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldBankCode, v))
}

// BranchCode applies equality check predicate on the "branch_code" field. It's identical to BranchCodeEQ.
func BranchCode(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldBranchCode, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldCreateAt, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldUpdateAt, v))
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldDeleteAt, v))
}

// AccountCodeEQ applies the EQ predicate on the "account_code" field.
func AccountCodeEQ(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldAccountCode, v))
}

// AccountCodeNEQ applies the NEQ predicate on the "account_code" field.
func AccountCodeNEQ(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNEQ(FieldAccountCode, v))
}

// AccountCodeIn applies the In predicate on the "account_code" field.
func AccountCodeIn(vs ...string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldIn(FieldAccountCode, vs...))
}

// AccountCodeNotIn applies the NotIn predicate on the "account_code" field.
func AccountCodeNotIn(vs ...string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNotIn(FieldAccountCode, vs...))
}

// AccountCodeGT applies the GT predicate on the "account_code" field.
func AccountCodeGT(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGT(FieldAccountCode, v))
}

// AccountCodeGTE applies the GTE predicate on the "account_code" field.
func AccountCodeGTE(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGTE(FieldAccountCode, v))
}

// AccountCodeLT applies the LT predicate on the "account_code" field.
func AccountCodeLT(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLT(FieldAccountCode, v))
}

// AccountCodeLTE applies the LTE predicate on the "account_code" field.
func AccountCodeLTE(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLTE(FieldAccountCode, v))
}

// AccountCodeContains applies the Contains predicate on the "account_code" field.
func AccountCodeContains(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldContains(FieldAccountCode, v))
}

// AccountCodeHasPrefix applies the HasPrefix predicate on the "account_code" field.
func AccountCodeHasPrefix(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldHasPrefix(FieldAccountCode, v))
}

// AccountCodeHasSuffix applies the HasSuffix predicate on the "account_code" field.
func AccountCodeHasSuffix(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldHasSuffix(FieldAccountCode, v))
}

// AccountCodeEqualFold applies the EqualFold predicate on the "account_code" field.
func AccountCodeEqualFold(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEqualFold(FieldAccountCode, v))
}

// AccountCodeContainsFold applies the ContainsFold predicate on the "account_code" field.
func AccountCodeContainsFold(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldContainsFold(FieldAccountCode, v))
}

// BankCodeEQ applies the EQ predicate on the "bank_code" field.
func BankCodeEQ(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldBankCode, v))
}

// BankCodeNEQ applies the NEQ predicate on the "bank_code" field.
func BankCodeNEQ(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNEQ(FieldBankCode, v))
}

// BankCodeIn applies the In predicate on the "bank_code" field.
func BankCodeIn(vs ...string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldIn(FieldBankCode, vs...))
}

// BankCodeNotIn applies the NotIn predicate on the "bank_code" field.
func BankCodeNotIn(vs ...string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNotIn(FieldBankCode, vs...))
}

// BankCodeGT applies the GT predicate on the "bank_code" field.
func BankCodeGT(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGT(FieldBankCode, v))
}

// BankCodeGTE applies the GTE predicate on the "bank_code" field.
func BankCodeGTE(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGTE(FieldBankCode, v))
}

// BankCodeLT applies the LT predicate on the "bank_code" field.
func BankCodeLT(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLT(FieldBankCode, v))
}

// BankCodeLTE applies the LTE predicate on the "bank_code" field.
func BankCodeLTE(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLTE(FieldBankCode, v))
}

// BankCodeContains applies the Contains predicate on the "bank_code" field.
func BankCodeContains(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldContains(FieldBankCode, v))
}

// BankCodeHasPrefix applies the HasPrefix predicate on the "bank_code" field.
func BankCodeHasPrefix(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldHasPrefix(FieldBankCode, v))
}

// BankCodeHasSuffix applies the HasSuffix predicate on the "bank_code" field.
func BankCodeHasSuffix(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldHasSuffix(FieldBankCode, v))
}

// BankCodeEqualFold applies the EqualFold predicate on the "bank_code" field.
func BankCodeEqualFold(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEqualFold(FieldBankCode, v))
}

// BankCodeContainsFold applies the ContainsFold predicate on the "bank_code" field.
func BankCodeContainsFold(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldContainsFold(FieldBankCode, v))
}

// BranchCodeEQ applies the EQ predicate on the "branch_code" field.
func BranchCodeEQ(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldBranchCode, v))
}

// BranchCodeNEQ applies the NEQ predicate on the "branch_code" field.
func BranchCodeNEQ(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNEQ(FieldBranchCode, v))
}

// BranchCodeIn applies the In predicate on the "branch_code" field.
func BranchCodeIn(vs ...string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldIn(FieldBranchCode, vs...))
}

// BranchCodeNotIn applies the NotIn predicate on the "branch_code" field.
func BranchCodeNotIn(vs ...string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNotIn(FieldBranchCode, vs...))
}

// BranchCodeGT applies the GT predicate on the "branch_code" field.
func BranchCodeGT(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGT(FieldBranchCode, v))
}

// BranchCodeGTE applies the GTE predicate on the "branch_code" field.
func BranchCodeGTE(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGTE(FieldBranchCode, v))
}

// BranchCodeLT applies the LT predicate on the "branch_code" field.
func BranchCodeLT(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLT(FieldBranchCode, v))
}

// BranchCodeLTE applies the LTE predicate on the "branch_code" field.
func BranchCodeLTE(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLTE(FieldBranchCode, v))
}

// BranchCodeContains applies the Contains predicate on the "branch_code" field.
func BranchCodeContains(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldContains(FieldBranchCode, v))
}

// BranchCodeHasPrefix applies the HasPrefix predicate on the "branch_code" field.
func BranchCodeHasPrefix(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldHasPrefix(FieldBranchCode, v))
}

// BranchCodeHasSuffix applies the HasSuffix predicate on the "branch_code" field.
func BranchCodeHasSuffix(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldHasSuffix(FieldBranchCode, v))
}

// BranchCodeEqualFold applies the EqualFold predicate on the "branch_code" field.
func BranchCodeEqualFold(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEqualFold(FieldBranchCode, v))
}

// BranchCodeContainsFold applies the ContainsFold predicate on the "branch_code" field.
func BranchCodeContainsFold(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldContainsFold(FieldBranchCode, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLTE(FieldCreateAt, v))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLTE(FieldUpdateAt, v))
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldDeleteAt, v))
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNEQ(FieldDeleteAt, v))
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldIn(FieldDeleteAt, vs...))
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNotIn(FieldDeleteAt, vs...))
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGT(FieldDeleteAt, v))
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGTE(FieldDeleteAt, v))
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLT(FieldDeleteAt, v))
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLTE(FieldDeleteAt, v))
}

// DeleteAtIsNil applies the IsNil predicate on the "delete_at" field.
func DeleteAtIsNil() predicate.BankAccount {
	return predicate.BankAccount(sql.FieldIsNull(FieldDeleteAt))
}

// DeleteAtNotNil applies the NotNil predicate on the "delete_at" field.
func DeleteAtNotNil() predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNotNull(FieldDeleteAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BankAccount) predicate.BankAccount {
	return predicate.BankAccount(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BankAccount) predicate.BankAccount {
	return predicate.BankAccount(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BankAccount) predicate.BankAccount {
	return predicate.BankAccount(sql.NotPredicates(p))
}
