// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datti-api/ent/bankaccount"
	"github.com/datti-api/ent/predicate"
)

// BankAccountUpdate is the builder for updating BankAccount entities.
type BankAccountUpdate struct {
	config
	hooks    []Hook
	mutation *BankAccountMutation
}

// Where appends a list predicates to the BankAccountUpdate builder.
func (bau *BankAccountUpdate) Where(ps ...predicate.BankAccount) *BankAccountUpdate {
	bau.mutation.Where(ps...)
	return bau
}

// SetAccountCode sets the "account_code" field.
func (bau *BankAccountUpdate) SetAccountCode(s string) *BankAccountUpdate {
	bau.mutation.SetAccountCode(s)
	return bau
}

// SetNillableAccountCode sets the "account_code" field if the given value is not nil.
func (bau *BankAccountUpdate) SetNillableAccountCode(s *string) *BankAccountUpdate {
	if s != nil {
		bau.SetAccountCode(*s)
	}
	return bau
}

// SetBankCode sets the "bank_code" field.
func (bau *BankAccountUpdate) SetBankCode(s string) *BankAccountUpdate {
	bau.mutation.SetBankCode(s)
	return bau
}

// SetNillableBankCode sets the "bank_code" field if the given value is not nil.
func (bau *BankAccountUpdate) SetNillableBankCode(s *string) *BankAccountUpdate {
	if s != nil {
		bau.SetBankCode(*s)
	}
	return bau
}

// SetBranchCode sets the "branch_code" field.
func (bau *BankAccountUpdate) SetBranchCode(s string) *BankAccountUpdate {
	bau.mutation.SetBranchCode(s)
	return bau
}

// SetNillableBranchCode sets the "branch_code" field if the given value is not nil.
func (bau *BankAccountUpdate) SetNillableBranchCode(s *string) *BankAccountUpdate {
	if s != nil {
		bau.SetBranchCode(*s)
	}
	return bau
}

// SetUpdateAt sets the "update_at" field.
func (bau *BankAccountUpdate) SetUpdateAt(t time.Time) *BankAccountUpdate {
	bau.mutation.SetUpdateAt(t)
	return bau
}

// SetDeleteAt sets the "delete_at" field.
func (bau *BankAccountUpdate) SetDeleteAt(t time.Time) *BankAccountUpdate {
	bau.mutation.SetDeleteAt(t)
	return bau
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (bau *BankAccountUpdate) SetNillableDeleteAt(t *time.Time) *BankAccountUpdate {
	if t != nil {
		bau.SetDeleteAt(*t)
	}
	return bau
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (bau *BankAccountUpdate) ClearDeleteAt() *BankAccountUpdate {
	bau.mutation.ClearDeleteAt()
	return bau
}

// Mutation returns the BankAccountMutation object of the builder.
func (bau *BankAccountUpdate) Mutation() *BankAccountMutation {
	return bau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bau *BankAccountUpdate) Save(ctx context.Context) (int, error) {
	bau.defaults()
	return withHooks(ctx, bau.sqlSave, bau.mutation, bau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bau *BankAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := bau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bau *BankAccountUpdate) Exec(ctx context.Context) error {
	_, err := bau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bau *BankAccountUpdate) ExecX(ctx context.Context) {
	if err := bau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bau *BankAccountUpdate) defaults() {
	if _, ok := bau.mutation.UpdateAt(); !ok {
		v := bankaccount.UpdateDefaultUpdateAt()
		bau.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bau *BankAccountUpdate) check() error {
	if v, ok := bau.mutation.AccountCode(); ok {
		if err := bankaccount.AccountCodeValidator(v); err != nil {
			return &ValidationError{Name: "account_code", err: fmt.Errorf(`ent: validator failed for field "BankAccount.account_code": %w`, err)}
		}
	}
	if v, ok := bau.mutation.BankCode(); ok {
		if err := bankaccount.BankCodeValidator(v); err != nil {
			return &ValidationError{Name: "bank_code", err: fmt.Errorf(`ent: validator failed for field "BankAccount.bank_code": %w`, err)}
		}
	}
	if v, ok := bau.mutation.BranchCode(); ok {
		if err := bankaccount.BranchCodeValidator(v); err != nil {
			return &ValidationError{Name: "branch_code", err: fmt.Errorf(`ent: validator failed for field "BankAccount.branch_code": %w`, err)}
		}
	}
	return nil
}

func (bau *BankAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bankaccount.Table, bankaccount.Columns, sqlgraph.NewFieldSpec(bankaccount.FieldID, field.TypeString))
	if ps := bau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bau.mutation.AccountCode(); ok {
		_spec.SetField(bankaccount.FieldAccountCode, field.TypeString, value)
	}
	if value, ok := bau.mutation.BankCode(); ok {
		_spec.SetField(bankaccount.FieldBankCode, field.TypeString, value)
	}
	if value, ok := bau.mutation.BranchCode(); ok {
		_spec.SetField(bankaccount.FieldBranchCode, field.TypeString, value)
	}
	if value, ok := bau.mutation.UpdateAt(); ok {
		_spec.SetField(bankaccount.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := bau.mutation.DeleteAt(); ok {
		_spec.SetField(bankaccount.FieldDeleteAt, field.TypeTime, value)
	}
	if bau.mutation.DeleteAtCleared() {
		_spec.ClearField(bankaccount.FieldDeleteAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bankaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bau.mutation.done = true
	return n, nil
}

// BankAccountUpdateOne is the builder for updating a single BankAccount entity.
type BankAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BankAccountMutation
}

// SetAccountCode sets the "account_code" field.
func (bauo *BankAccountUpdateOne) SetAccountCode(s string) *BankAccountUpdateOne {
	bauo.mutation.SetAccountCode(s)
	return bauo
}

// SetNillableAccountCode sets the "account_code" field if the given value is not nil.
func (bauo *BankAccountUpdateOne) SetNillableAccountCode(s *string) *BankAccountUpdateOne {
	if s != nil {
		bauo.SetAccountCode(*s)
	}
	return bauo
}

// SetBankCode sets the "bank_code" field.
func (bauo *BankAccountUpdateOne) SetBankCode(s string) *BankAccountUpdateOne {
	bauo.mutation.SetBankCode(s)
	return bauo
}

// SetNillableBankCode sets the "bank_code" field if the given value is not nil.
func (bauo *BankAccountUpdateOne) SetNillableBankCode(s *string) *BankAccountUpdateOne {
	if s != nil {
		bauo.SetBankCode(*s)
	}
	return bauo
}

// SetBranchCode sets the "branch_code" field.
func (bauo *BankAccountUpdateOne) SetBranchCode(s string) *BankAccountUpdateOne {
	bauo.mutation.SetBranchCode(s)
	return bauo
}

// SetNillableBranchCode sets the "branch_code" field if the given value is not nil.
func (bauo *BankAccountUpdateOne) SetNillableBranchCode(s *string) *BankAccountUpdateOne {
	if s != nil {
		bauo.SetBranchCode(*s)
	}
	return bauo
}

// SetUpdateAt sets the "update_at" field.
func (bauo *BankAccountUpdateOne) SetUpdateAt(t time.Time) *BankAccountUpdateOne {
	bauo.mutation.SetUpdateAt(t)
	return bauo
}

// SetDeleteAt sets the "delete_at" field.
func (bauo *BankAccountUpdateOne) SetDeleteAt(t time.Time) *BankAccountUpdateOne {
	bauo.mutation.SetDeleteAt(t)
	return bauo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (bauo *BankAccountUpdateOne) SetNillableDeleteAt(t *time.Time) *BankAccountUpdateOne {
	if t != nil {
		bauo.SetDeleteAt(*t)
	}
	return bauo
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (bauo *BankAccountUpdateOne) ClearDeleteAt() *BankAccountUpdateOne {
	bauo.mutation.ClearDeleteAt()
	return bauo
}

// Mutation returns the BankAccountMutation object of the builder.
func (bauo *BankAccountUpdateOne) Mutation() *BankAccountMutation {
	return bauo.mutation
}

// Where appends a list predicates to the BankAccountUpdate builder.
func (bauo *BankAccountUpdateOne) Where(ps ...predicate.BankAccount) *BankAccountUpdateOne {
	bauo.mutation.Where(ps...)
	return bauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bauo *BankAccountUpdateOne) Select(field string, fields ...string) *BankAccountUpdateOne {
	bauo.fields = append([]string{field}, fields...)
	return bauo
}

// Save executes the query and returns the updated BankAccount entity.
func (bauo *BankAccountUpdateOne) Save(ctx context.Context) (*BankAccount, error) {
	bauo.defaults()
	return withHooks(ctx, bauo.sqlSave, bauo.mutation, bauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bauo *BankAccountUpdateOne) SaveX(ctx context.Context) *BankAccount {
	node, err := bauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bauo *BankAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := bauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bauo *BankAccountUpdateOne) ExecX(ctx context.Context) {
	if err := bauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bauo *BankAccountUpdateOne) defaults() {
	if _, ok := bauo.mutation.UpdateAt(); !ok {
		v := bankaccount.UpdateDefaultUpdateAt()
		bauo.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bauo *BankAccountUpdateOne) check() error {
	if v, ok := bauo.mutation.AccountCode(); ok {
		if err := bankaccount.AccountCodeValidator(v); err != nil {
			return &ValidationError{Name: "account_code", err: fmt.Errorf(`ent: validator failed for field "BankAccount.account_code": %w`, err)}
		}
	}
	if v, ok := bauo.mutation.BankCode(); ok {
		if err := bankaccount.BankCodeValidator(v); err != nil {
			return &ValidationError{Name: "bank_code", err: fmt.Errorf(`ent: validator failed for field "BankAccount.bank_code": %w`, err)}
		}
	}
	if v, ok := bauo.mutation.BranchCode(); ok {
		if err := bankaccount.BranchCodeValidator(v); err != nil {
			return &ValidationError{Name: "branch_code", err: fmt.Errorf(`ent: validator failed for field "BankAccount.branch_code": %w`, err)}
		}
	}
	return nil
}

func (bauo *BankAccountUpdateOne) sqlSave(ctx context.Context) (_node *BankAccount, err error) {
	if err := bauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bankaccount.Table, bankaccount.Columns, sqlgraph.NewFieldSpec(bankaccount.FieldID, field.TypeString))
	id, ok := bauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BankAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bankaccount.FieldID)
		for _, f := range fields {
			if !bankaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bankaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bauo.mutation.AccountCode(); ok {
		_spec.SetField(bankaccount.FieldAccountCode, field.TypeString, value)
	}
	if value, ok := bauo.mutation.BankCode(); ok {
		_spec.SetField(bankaccount.FieldBankCode, field.TypeString, value)
	}
	if value, ok := bauo.mutation.BranchCode(); ok {
		_spec.SetField(bankaccount.FieldBranchCode, field.TypeString, value)
	}
	if value, ok := bauo.mutation.UpdateAt(); ok {
		_spec.SetField(bankaccount.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := bauo.mutation.DeleteAt(); ok {
		_spec.SetField(bankaccount.FieldDeleteAt, field.TypeTime, value)
	}
	if bauo.mutation.DeleteAtCleared() {
		_spec.ClearField(bankaccount.FieldDeleteAt, field.TypeTime)
	}
	_node = &BankAccount{config: bauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bankaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bauo.mutation.done = true
	return _node, nil
}
