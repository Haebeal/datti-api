// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datti-api/ent/bankaccount"
)

// BankAccount is the model entity for the BankAccount schema.
type BankAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// AccountCode holds the value of the "account_code" field.
	AccountCode string `json:"account_code,omitempty"`
	// BankCode holds the value of the "bank_code" field.
	BankCode string `json:"bank_code,omitempty"`
	// BranchCode holds the value of the "branch_code" field.
	BranchCode string `json:"branch_code,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt    *time.Time `json:"deleted_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BankAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bankaccount.FieldID, bankaccount.FieldAccountCode, bankaccount.FieldBankCode, bankaccount.FieldBranchCode:
			values[i] = new(sql.NullString)
		case bankaccount.FieldCreatedAt, bankaccount.FieldUpdatedAt, bankaccount.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BankAccount fields.
func (ba *BankAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bankaccount.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ba.ID = value.String
			}
		case bankaccount.FieldAccountCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_code", values[i])
			} else if value.Valid {
				ba.AccountCode = value.String
			}
		case bankaccount.FieldBankCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bank_code", values[i])
			} else if value.Valid {
				ba.BankCode = value.String
			}
		case bankaccount.FieldBranchCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field branch_code", values[i])
			} else if value.Valid {
				ba.BranchCode = value.String
			}
		case bankaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ba.CreatedAt = value.Time
			}
		case bankaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ba.UpdatedAt = value.Time
			}
		case bankaccount.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ba.DeletedAt = new(time.Time)
				*ba.DeletedAt = value.Time
			}
		default:
			ba.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BankAccount.
// This includes values selected through modifiers, order, etc.
func (ba *BankAccount) Value(name string) (ent.Value, error) {
	return ba.selectValues.Get(name)
}

// Update returns a builder for updating this BankAccount.
// Note that you need to call BankAccount.Unwrap() before calling this method if this BankAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (ba *BankAccount) Update() *BankAccountUpdateOne {
	return NewBankAccountClient(ba.config).UpdateOne(ba)
}

// Unwrap unwraps the BankAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ba *BankAccount) Unwrap() *BankAccount {
	_tx, ok := ba.config.driver.(*txDriver)
	if !ok {
		panic("ent: BankAccount is not a transactional entity")
	}
	ba.config.driver = _tx.drv
	return ba
}

// String implements the fmt.Stringer.
func (ba *BankAccount) String() string {
	var builder strings.Builder
	builder.WriteString("BankAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ba.ID))
	builder.WriteString("account_code=")
	builder.WriteString(ba.AccountCode)
	builder.WriteString(", ")
	builder.WriteString("bank_code=")
	builder.WriteString(ba.BankCode)
	builder.WriteString(", ")
	builder.WriteString("branch_code=")
	builder.WriteString(ba.BranchCode)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ba.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ba.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ba.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// BankAccounts is a parsable slice of BankAccount.
type BankAccounts []*BankAccount
